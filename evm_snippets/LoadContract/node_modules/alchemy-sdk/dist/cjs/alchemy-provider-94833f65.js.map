{"version":3,"file":"alchemy-provider-94833f65.js","sources":["../../src/api/alchemy-provider.ts"],"sourcesContent":["import {\n  JsonRpcProvider,\n  CommunityResourcable\n} from '@ethersproject/providers';\nimport {\n  Network as NetworkFromEthers,\n  Networkish\n} from '@ethersproject/networks';\nimport { ConnectionInfo } from '@ethersproject/web';\nimport {\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { Network } from '../types/types';\nimport { logWarn } from '../util/logger';\nimport { VERSION } from '../version';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n\n  constructor(network: Networkish, apiKey: string, maxRetries: number) {\n    // Normalize the API Key to a string.\n    apiKey = AlchemyProvider.getApiKey(apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n    this.apiKey = apiKey;\n    this.maxRetries = maxRetries;\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: {\n        'Alchemy-Ethers-Sdk-Version': VERSION,\n        'Accept-Encoding': 'gzip'\n      },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Implement sender logic to override retries and backoff.\n  send(method: string, params: Array<any>): Promise<any> {\n    return super.send(method, params);\n  }\n}\n"],"names":["JsonRpcProvider","EthersNetwork","DEFAULT_ALCHEMY_API_KEY","DEFAULT_NETWORK","Network","getAlchemyHttpUrl","getAlchemyWsUrl","VERSION","logWarn"],"mappings":"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"}