'use strict';

var index = require('./index-04a23af4.js');
var providers = require('@ethersproject/providers');
require('@ethersproject/bignumber');
require('axios');

/**
 * SDK's custom implementation of ethers.js's 'AlchemyProvider'.
 *
 * @public
 */
class AlchemyProvider extends providers.JsonRpcProvider {
    constructor(network, apiKey, maxRetries) {
        // Normalize the API Key to a string.
        apiKey = AlchemyProvider.getApiKey(apiKey);
        // Generate our own connection info with the correct endpoint URLs.
        const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(network);
        const connection = AlchemyProvider.getAlchemyConnectionInfo(alchemyNetwork, apiKey, 'http');
        // Normalize the Alchemy named network input to the network names used by
        // ethers. This allows the parent super constructor in JsonRpcProvider to
        // correctly set the network.
        const ethersNetwork = index.EthersNetwork[alchemyNetwork];
        super(connection, ethersNetwork);
        this.apiKey = apiKey;
        this.maxRetries = maxRetries;
    }
    /**
     * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by
     * ethers.js. Returns the API key for an Alchemy provider.
     *
     * @internal
     * @override
     */
    static getApiKey(apiKey) {
        if (apiKey == null) {
            return index.DEFAULT_ALCHEMY_API_KEY;
        }
        if (apiKey && typeof apiKey !== 'string') {
            throw new Error(`Invalid apiKey '${apiKey}' provided. apiKey must be a string.`);
        }
        return apiKey;
    }
    /**
     * Converts the `Networkish` input to the network enum used by Alchemy.
     *
     * @internal
     */
    static getAlchemyNetwork(network) {
        if (network === undefined) {
            return index.DEFAULT_NETWORK;
        }
        if (typeof network === 'number') {
            throw new Error(`Invalid network '${network}' provided. Network must be a string.`);
        }
        // Guaranteed that `typeof network === 'string`.
        const isValidNetwork = Object.values(index.Network).includes(network);
        if (!isValidNetwork) {
            throw new Error(`Invalid network '${network}' provided. Network must be one of: ` +
                `${Object.values(index.Network).join(', ')}.`);
        }
        return network;
    }
    /**
     * Returns a {@link ConnectionInfo} object compatible with ethers that contains
     * the correct URLs for Alchemy.
     *
     * @internal
     */
    static getAlchemyConnectionInfo(network, apiKey, type) {
        const url = type === 'http'
            ? index.getAlchemyHttpUrl(network, apiKey)
            : index.getAlchemyWsUrl(network, apiKey);
        return {
            headers: {
                'Alchemy-Ethers-Sdk-Version': index.VERSION,
                'Accept-Encoding': 'gzip'
            },
            allowGzip: true,
            url
        };
    }
    /**
     * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This
     * method is called when calling methods on the parent class `BaseProvider`.
     *
     * @override
     */
    detectNetwork() {
        const _super = Object.create(null, {
            detectNetwork: { get: () => super.detectNetwork }
        });
        return index.__awaiter(this, void 0, void 0, function* () {
            let network = this.network;
            if (network == null) {
                network = yield _super.detectNetwork.call(this);
                if (!network) {
                    throw new Error('No network detected');
                }
            }
            return network;
        });
    }
    _startPending() {
        index.logWarn('WARNING: Alchemy Provider does not support pending filters');
    }
    /**
     * Overrides the ether's `isCommunityResource()` method. Returns true if the
     * current api key is the default key.
     *
     * @override
     */
    isCommunityResource() {
        return this.apiKey === index.DEFAULT_ALCHEMY_API_KEY;
    }
    /**
     * Overrides the base {@link JsonRpcProvider.send} method to implement custom
     * logic for sending requests to Alchemy.
     *
     * @param method The method name to use for the request.
     * @param params The parameters to use for the request.
     * @override
     * @public
     */
    // TODO: Implement sender logic to override retries and backoff.
    send(method, params) {
        return super.send(method, params);
    }
}

exports.AlchemyProvider = AlchemyProvider;
//# sourceMappingURL=alchemy-provider-94833f65.js.map
